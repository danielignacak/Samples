
//----------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a tool.
//		Changes to this file may cause incorrect behaviour and will be lost 
//		if the code is regenerated.
// </autogenerated>
//----------------------------------------------------------------------------------

using System;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Globalization;
using Soneta.Types;
using Soneta.Business;
using Soneta.Handel;
using EnovaDB.Punktacja;

[assembly: ModuleType("Punktacja", typeof(EnovaDB.Punktacja.PunktacjaModule), 4, "Punktacja", 2, VersionNumber=4)]
[assembly: SimpleRight(typeof(DefinicjaPunktu), "Edycja pola Nazwa", Description="Zezwala na edycję pola Nazwa zapisu.")]

namespace EnovaDB.Punktacja {

	/// <summary>
	/// Moduł Punktacja.
	/// <seealso cref="Soneta.Handel"/>
	/// </summary>
	/// <seealso cref="Soneta.Business.Module"/>
	/// <seealso cref="Soneta.Business.Session"/>
	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public partial class PunktacjaModule : Module {

		public static PunktacjaModule GetInstance(ISessionable session) => (PunktacjaModule)session?.Session?.Modules[moduleInfo];

		private static Soneta.Business.App.ModuleInfo moduleInfo = new Soneta.Business.App.ModuleInfo(session => new PunktacjaModule(session)) {
		};

		PunktacjaModule(Session session) : base(session) {}

		private HandelModule moduleHandel;

		[Browsable(false)]
		public HandelModule Handel => moduleHandel ?? (moduleHandel = HandelModule.GetInstance(Session));

		private static Soneta.Business.App.TableInfo tableInfoDefPunkty = new Soneta.Business.App.TableInfo.Create<DefPunkty, DefinicjaPunktu, DefinicjaPunktuRecord>("Definicj") {
			IsConfig = true,
		};

		public DefPunkty DefPunkty => (DefPunkty)Session.Tables[tableInfoDefPunkty];

		private static Soneta.Business.App.KeyInfo keyInfoDefinicjaPunktuWgNazwy = new Soneta.Business.App.KeyInfo(tableInfoDefPunkty, table => new DefinicjaPunktuTable.WgNazwyKey(table)) {
			Name = "WgNazwy",
			Unique = true,
			PrimaryKey = true,
			KeyFields = new[] {"Nazwa"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów DefinicjaPunktu.
		/// Dziedzicząca klasa <see cref="DefPunkty"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="DefPunkty"/>
		/// <seealso cref="DefinicjaPunktuRow"/>
		/// <seealso cref="DefinicjaPunktu"/>
		/// <seealso cref="Soneta.Business.Table"/>
		public abstract partial class DefinicjaPunktuTable : GuidedTable {

			protected DefinicjaPunktuTable() {}

			public class WgNazwyKey : Key<DefinicjaPunktu> {
				internal WgNazwyKey(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((DefinicjaPunktuRecord)rec).Nazwa.TrimEnd()
				};

				public DefinicjaPunktu this[string nazwa] => (DefinicjaPunktu)Find(nazwa);
			}

			public WgNazwyKey WgNazwy => (WgNazwyKey)Session.Keys[keyInfoDefinicjaPunktuWgNazwy];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="PunktacjaModule"/>
			public new PunktacjaModule Module => (PunktacjaModule)base.Module;

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="DefinicjaPunktu"/>
			public new DefinicjaPunktu this[int id] => (DefinicjaPunktu)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="DefinicjaPunktu"/>
			public new DefinicjaPunktu[] this[int[] ids] => (DefinicjaPunktu[])base[ids];

			public new DefinicjaPunktu this[Guid guid] => (DefinicjaPunktu)base[guid];

			protected override Row CreateRow(RowCreator creator) => new DefinicjaPunktu();

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Guid");
				names.Append(divider); names.Append("Nazwa");
				names.Append(divider); names.Append("Mnoznik");
			}

		}

		[Caption("Definicje dodatkowych punktów")]
		public abstract partial class DefinicjaPunktuRow : GuidedRow {

			private DefinicjaPunktuRecord record;

			protected override void AssignRecord(Record rec) {
				record = (DefinicjaPunktuRecord)rec;
			}

			protected DefinicjaPunktuRow() : base(true) {
			}

			[Description("Pełna nazwa definicji punktu.")]
			[Category("Ogólne")]
			[MaxLength(30)]
			[Required]
			public string Nazwa {
				get {
					if (record==null) GetRecord();
					return record.Nazwa;
				}
				set {
					DefinicjaPunktuSchema.NazwaBeforeEdit?.Invoke((DefinicjaPunktu)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "Nazwa");
					if (value.Length>NazwaLength) throw new ValueToLongException(this, "Nazwa", NazwaLength);
					if (!AllowsEditImportantFields("Nazwa")) throw new ColReadOnlyException(this, "Nazwa");
					GetEdit(record==null, false);
					record.Nazwa = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoDefinicjaPunktuWgNazwy);
						if (State==RowState.Modified) Session.Verifiers.Add(new ImportantColumnVerifier<DefinicjaPunktu>((DefinicjaPunktu)this, "Nazwa"));
					}
					DefinicjaPunktuSchema.NazwaAfterEdit?.Invoke((DefinicjaPunktu)this);
				}
			}

			public const int NazwaLength = 30;

			public bool IsReadOnlyNazwa() {
				return IsReadOnly() || !AllowsEditImportantFields("Nazwa");
			}

			[Description("Mnożnik punktów, który służy do wyliczenia ilości punktów.")]
			[Caption("Mnożnik")]
			public int Mnoznik {
				get {
					if (record==null) GetRecord();
					return record.Mnoznik;
				}
				set {
					DefinicjaPunktuSchema.MnoznikBeforeEdit?.Invoke((DefinicjaPunktu)this, ref value);
					GetEdit(record==null, false);
					record.Mnoznik = value;
					DefinicjaPunktuSchema.MnoznikAfterEdit?.Invoke((DefinicjaPunktu)this);
				}
			}

			[Browsable(false)]
			public new DefPunkty Table => (DefPunkty)base.Table;

			[Browsable(false)]
			public PunktacjaModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => tableInfoDefPunkty;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				DefinicjaPunktuSchema.OnCalcObjectRight?.Invoke((DefinicjaPunktu)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				DefinicjaPunktuSchema.OnCalcParentsObjectRight?.Invoke((DefinicjaPunktu)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				DefinicjaPunktuSchema.OnCalcReadOnly?.Invoke((DefinicjaPunktu)this, ref result);
				return result;
			}

			class NazwaRequiredVerifier : RequiredVerifier {
				internal NazwaRequiredVerifier(IRow row) : base(row, "Nazwa") {
				}
				protected override bool IsValid() => !(string.IsNullOrEmpty(((DefinicjaPunktuRow)Row).Nazwa));
			}

			protected override void OnAdded() {
				base.OnAdded();
				Session.Verifiers.Add(new NazwaRequiredVerifier(this));
				DefinicjaPunktuSchema.OnAdded?.Invoke((DefinicjaPunktu)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				DefinicjaPunktuSchema.OnLoaded?.Invoke((DefinicjaPunktu)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				DefinicjaPunktuSchema.OnEditing?.Invoke((DefinicjaPunktu)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				DefinicjaPunktuSchema.OnDeleting?.Invoke((DefinicjaPunktu)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				DefinicjaPunktuSchema.OnDeleted?.Invoke((DefinicjaPunktu)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				DefinicjaPunktuSchema.OnRepacked?.Invoke((DefinicjaPunktu)this);
			}

		}

		public sealed class DefinicjaPunktuRecord : GuidedRecord {
			[Required]
			[MaxLength(30)]
			public string Nazwa = "";
			public int Mnoznik;

			public override Record Clone() {
				DefinicjaPunktuRecord rec = (DefinicjaPunktuRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Guid = creator.Read_guid();
				Nazwa = creator.Read_string();
				Mnoznik = creator.Read_int();
			}
		}

		public static class DefinicjaPunktuSchema {

			internal static RowDelegate<DefinicjaPunktuRow, string> NazwaBeforeEdit;
			public static void AddNazwaBeforeEdit(RowDelegate<DefinicjaPunktuRow, string> value)
				=> NazwaBeforeEdit = (RowDelegate<DefinicjaPunktuRow, string>)Delegate.Combine(NazwaBeforeEdit, value);

			internal static RowDelegate<DefinicjaPunktuRow> NazwaAfterEdit;
			public static void AddNazwaAfterEdit(RowDelegate<DefinicjaPunktuRow> value)
				=> NazwaAfterEdit = (RowDelegate<DefinicjaPunktuRow>)Delegate.Combine(NazwaAfterEdit, value);

			internal static RowDelegate<DefinicjaPunktuRow, int> MnoznikBeforeEdit;
			public static void AddMnoznikBeforeEdit(RowDelegate<DefinicjaPunktuRow, int> value)
				=> MnoznikBeforeEdit = (RowDelegate<DefinicjaPunktuRow, int>)Delegate.Combine(MnoznikBeforeEdit, value);

			internal static RowDelegate<DefinicjaPunktuRow> MnoznikAfterEdit;
			public static void AddMnoznikAfterEdit(RowDelegate<DefinicjaPunktuRow> value)
				=> MnoznikAfterEdit = (RowDelegate<DefinicjaPunktuRow>)Delegate.Combine(MnoznikAfterEdit, value);

			internal static RowDelegate<DefinicjaPunktuRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<DefinicjaPunktuRow> value)
				=> OnLoaded = (RowDelegate<DefinicjaPunktuRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<DefinicjaPunktuRow> OnAdded;
			public static void AddOnAdded(RowDelegate<DefinicjaPunktuRow> value)
				=> OnAdded = (RowDelegate<DefinicjaPunktuRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<DefinicjaPunktuRow> OnEditing;
			public static void AddOnEditing(RowDelegate<DefinicjaPunktuRow> value)
				=> OnEditing = (RowDelegate<DefinicjaPunktuRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<DefinicjaPunktuRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<DefinicjaPunktuRow> value)
				=> OnDeleting = (RowDelegate<DefinicjaPunktuRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<DefinicjaPunktuRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<DefinicjaPunktuRow> value)
				=> OnDeleted = (RowDelegate<DefinicjaPunktuRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<DefinicjaPunktuRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<DefinicjaPunktuRow> value)
				=> OnRepacked = (RowDelegate<DefinicjaPunktuRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<DefinicjaPunktuRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<DefinicjaPunktuRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<DefinicjaPunktuRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<DefinicjaPunktuRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<DefinicjaPunktuRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<DefinicjaPunktuRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<DefinicjaPunktuRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<DefinicjaPunktuRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<DefinicjaPunktuRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

		private static Soneta.Business.App.TableInfo tableInfoPunkty = new Soneta.Business.App.TableInfo.Create<Punkty, Punkt, PunktRecord>("Punkt") {
		};

		public Punkty Punkty => (Punkty)Session.Tables[tableInfoPunkty];

		private static Soneta.Business.App.KeyInfo keyInfoPunktDefinicja = new Soneta.Business.App.KeyInfo(tableInfoPunkty, table => new PunktTable.DefinicjaRelation(table)) {
			Name = "Definicja punktu dokumentu handlowego",
			RelationTo = "DefinicjaPunktu",
			KeyFields = new[] {"Definicja", "ID"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoPunktDokument = new Soneta.Business.App.KeyInfo(tableInfoPunkty, table => new PunktTable.DokumentRelation(table)) {
			Name = "Punkty dokumentu handlowego",
			RelationTo = "DokumentHandlowy",
			DeleteCascade = true,
			Guided = RelationGuidedType.Inner,
			PrimaryKey = true,
			KeyFields = new[] {"Dokument", "ID"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów Punkt.
		/// Dziedzicząca klasa <see cref="Punkty"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="Punkty"/>
		/// <seealso cref="PunktRow"/>
		/// <seealso cref="Punkt"/>
		/// <seealso cref="Soneta.Business.Table"/>
		public abstract partial class PunktTable : Table {

			protected PunktTable() {}

			public class DefinicjaRelation : Key<Punkt> {
				internal DefinicjaRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((PunktRecord)rec).Definicja,
					row.ID
				};

				public SubTable<Punkt> this[DefinicjaPunktu definicja] => new SubTable<Punkt>(this, definicja);
			}

			public DefinicjaRelation WgDefinicja => (DefinicjaRelation)Session.Keys[keyInfoPunktDefinicja];

			public class DokumentRelation : Key<Punkt> {
				internal DokumentRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((PunktRecord)rec).Dokument,
					row.ID
				};

				public SubTable<Punkt> this[DokumentHandlowy dokument] => new SubTable<Punkt>(this, dokument);
			}

			public DokumentRelation WgDokument => (DokumentRelation)Session.Keys[keyInfoPunktDokument];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="PunktacjaModule"/>
			public new PunktacjaModule Module => (PunktacjaModule)base.Module;

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Punkt"/>
			public new Punkt this[int id] => (Punkt)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Punkt"/>
			public new Punkt[] this[int[] ids] => (Punkt[])base[ids];

			protected override Row CreateRow(RowCreator creator) => new Punkt(creator);

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Definicja");
				names.Append(divider); names.Append("Dokument");
				names.Append(divider); names.Append("Liczba");
				names.Append(divider); names.Append("LiczbaNalezna1");
				names.Append(divider); names.Append("LiczbaNalezna2");
			}

		}

		[Caption("Dodatkowe punkty")]
		public abstract partial class PunktRow : Row {

			private PunktRecord record;

			protected override void AssignRecord(Record rec) {
				record = (PunktRecord)rec;
			}

			protected PunktRow(RowCreator creator) : base(false) {
			}

			protected PunktRow([Required] DokumentHandlowy dokument) : base(true) {
				if (dokument==null) throw new RequiredException(this, "Dokument");
				GetRecord();
				record.Dokument = dokument;
			}

			[Description("Określa rodzaj przypisanego punktu.")]
			[Category("Ogólne")]
			[Required]
			public virtual DefinicjaPunktu Definicja {
				get {
					if (record==null) GetRecord();
					return (DefinicjaPunktu)GetRowReference(ref record.Definicja);
				}
				set {
					PunktSchema.DefinicjaBeforeEdit?.Invoke((Punkt)this, ref value);
					System.Diagnostics.Debug.Assert(value==null || State==RowState.Detached || value.State==RowState.Detached || Session==value.Session);
					GetEdit(record==null, false);
					if (value==null) throw new RequiredException(this, "Definicja");
					record.Definicja = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoPunktDefinicja);
					}
					PunktSchema.DefinicjaAfterEdit?.Invoke((Punkt)this);
				}
			}

			[Description("Dokument handlowy, któremu przypisany jest dany punkt.")]
			[Category("Ogólne")]
			[Required]
			public DokumentHandlowy Dokument {
				get {
					if (record==null) GetRecord();
					return (DokumentHandlowy)GetRowReference(ref record.Dokument);
				}
			}

			[Description("Ilość przypisanych punktów.")]
			public virtual int Liczba {
				get {
					if (record==null) GetRecord();
					return record.Liczba;
				}
				set {
					PunktSchema.LiczbaBeforeEdit?.Invoke((Punkt)this, ref value);
					GetEdit(record==null, false);
					record.Liczba = value;
					PunktSchema.LiczbaAfterEdit?.Invoke((Punkt)this);
				}
			}

			[Description("Ilość należna przypisanych punktów (konwersja IDatabaseInitializer).")]
			public int LiczbaNalezna1 {
				get {
					if (record==null) GetRecord();
					return record.LiczbaNalezna1;
				}
			}

			protected int baseLiczbaNalezna1 {
				set {
					PunktSchema.LiczbaNalezna1BeforeEdit?.Invoke((Punkt)this, ref value);
					GetEdit(record==null, false);
					record.LiczbaNalezna1 = value;
					PunktSchema.LiczbaNalezna1AfterEdit?.Invoke((Punkt)this);
				}
			}

			[Description("Ilość należna przypisanych punktów (konwersja sql).")]
			public int LiczbaNalezna2 {
				get {
					if (record==null) GetRecord();
					return record.LiczbaNalezna2;
				}
			}

			protected int baseLiczbaNalezna2 {
				set {
					PunktSchema.LiczbaNalezna2BeforeEdit?.Invoke((Punkt)this, ref value);
					GetEdit(record==null, false);
					record.LiczbaNalezna2 = value;
					PunktSchema.LiczbaNalezna2AfterEdit?.Invoke((Punkt)this);
				}
			}

			[Browsable(false)]
			public new Punkty Table => (Punkty)base.Table;

			[Browsable(false)]
			public PunktacjaModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => tableInfoPunkty;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				PunktSchema.OnCalcObjectRight?.Invoke((Punkt)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				PunktSchema.OnCalcParentsObjectRight?.Invoke((Punkt)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				PunktSchema.OnCalcReadOnly?.Invoke((Punkt)this, ref result);
				return result;
			}

			class DefinicjaRequiredVerifier : RequiredVerifier {
				internal DefinicjaRequiredVerifier(IRow row) : base(row, "Definicja") {
				}
				protected override bool IsValid() => ((PunktRow)Row).Definicja!=null;
			}

			protected override void OnAdded() {
				base.OnAdded();
				Session.Verifiers.Add(new DefinicjaRequiredVerifier(this));
				System.Diagnostics.Debug.Assert(record.Definicja==null || record.Definicja.State==RowState.Detached || Session==record.Definicja.Session);
				System.Diagnostics.Debug.Assert(record.Dokument==null || record.Dokument.State==RowState.Detached || Session==record.Dokument.Session);
				PunktSchema.OnAdded?.Invoke((Punkt)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				PunktSchema.OnLoaded?.Invoke((Punkt)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				PunktSchema.OnEditing?.Invoke((Punkt)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				PunktSchema.OnDeleting?.Invoke((Punkt)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				PunktSchema.OnDeleted?.Invoke((Punkt)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				PunktSchema.OnRepacked?.Invoke((Punkt)this);
			}

			protected override void LockGuidedRoot() => LockGuidedRoot((Row)Dokument);

			public override GuidedRow GetGuidedRoot() => ((Row)Dokument)?.GetGuidedRoot();

		}

		public sealed class PunktRecord : Record {
			[Required]
			[ParentTable("DefinicjaPunktu")]
			public IRow Definicja;
			[Required]
			[ParentTable("DokumentHandlowy")]
			public IRow Dokument;
			public int Liczba;
			public int LiczbaNalezna1;
			public int LiczbaNalezna2;

			public override Record Clone() {
				PunktRecord rec = (PunktRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Definicja = creator.Read_Row(tableInfoDefPunkty);
				Dokument = creator.Read_Row("DokHandlowe");
				Liczba = creator.Read_int();
				LiczbaNalezna1 = creator.Read_int();
				LiczbaNalezna2 = creator.Read_int();
			}
		}

		public static class PunktSchema {

			internal static RowDelegate<PunktRow, DefinicjaPunktu> DefinicjaBeforeEdit;
			public static void AddDefinicjaBeforeEdit(RowDelegate<PunktRow, DefinicjaPunktu> value)
				=> DefinicjaBeforeEdit = (RowDelegate<PunktRow, DefinicjaPunktu>)Delegate.Combine(DefinicjaBeforeEdit, value);

			internal static RowDelegate<PunktRow> DefinicjaAfterEdit;
			public static void AddDefinicjaAfterEdit(RowDelegate<PunktRow> value)
				=> DefinicjaAfterEdit = (RowDelegate<PunktRow>)Delegate.Combine(DefinicjaAfterEdit, value);

			internal static RowDelegate<PunktRow, int> LiczbaBeforeEdit;
			public static void AddLiczbaBeforeEdit(RowDelegate<PunktRow, int> value)
				=> LiczbaBeforeEdit = (RowDelegate<PunktRow, int>)Delegate.Combine(LiczbaBeforeEdit, value);

			internal static RowDelegate<PunktRow> LiczbaAfterEdit;
			public static void AddLiczbaAfterEdit(RowDelegate<PunktRow> value)
				=> LiczbaAfterEdit = (RowDelegate<PunktRow>)Delegate.Combine(LiczbaAfterEdit, value);

			internal static RowDelegate<PunktRow, int> LiczbaNalezna1BeforeEdit;
			public static void AddLiczbaNalezna1BeforeEdit(RowDelegate<PunktRow, int> value)
				=> LiczbaNalezna1BeforeEdit = (RowDelegate<PunktRow, int>)Delegate.Combine(LiczbaNalezna1BeforeEdit, value);

			internal static RowDelegate<PunktRow> LiczbaNalezna1AfterEdit;
			public static void AddLiczbaNalezna1AfterEdit(RowDelegate<PunktRow> value)
				=> LiczbaNalezna1AfterEdit = (RowDelegate<PunktRow>)Delegate.Combine(LiczbaNalezna1AfterEdit, value);

			internal static RowDelegate<PunktRow, int> LiczbaNalezna2BeforeEdit;
			public static void AddLiczbaNalezna2BeforeEdit(RowDelegate<PunktRow, int> value)
				=> LiczbaNalezna2BeforeEdit = (RowDelegate<PunktRow, int>)Delegate.Combine(LiczbaNalezna2BeforeEdit, value);

			internal static RowDelegate<PunktRow> LiczbaNalezna2AfterEdit;
			public static void AddLiczbaNalezna2AfterEdit(RowDelegate<PunktRow> value)
				=> LiczbaNalezna2AfterEdit = (RowDelegate<PunktRow>)Delegate.Combine(LiczbaNalezna2AfterEdit, value);

			internal static RowDelegate<PunktRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<PunktRow> value)
				=> OnLoaded = (RowDelegate<PunktRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<PunktRow> OnAdded;
			public static void AddOnAdded(RowDelegate<PunktRow> value)
				=> OnAdded = (RowDelegate<PunktRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<PunktRow> OnEditing;
			public static void AddOnEditing(RowDelegate<PunktRow> value)
				=> OnEditing = (RowDelegate<PunktRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<PunktRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<PunktRow> value)
				=> OnDeleting = (RowDelegate<PunktRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<PunktRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<PunktRow> value)
				=> OnDeleted = (RowDelegate<PunktRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<PunktRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<PunktRow> value)
				=> OnRepacked = (RowDelegate<PunktRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<PunktRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<PunktRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<PunktRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<PunktRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<PunktRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<PunktRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<PunktRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<PunktRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<PunktRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

	}

	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public static class StaticsPunktacjaModule {
		public static PunktacjaModule GetPunktacja(this Session session) => PunktacjaModule.GetInstance(session);
	}

}

